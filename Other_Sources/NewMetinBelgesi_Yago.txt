import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
import tensorflow as tf
from tensorflow import keras
from sklearn.metrics import mean_absolute_error, mean_squared_error
from keras.models import load_model, Sequential
from keras.layers import Dense


# load data into pandas dataframe
df = pd.read_excel("merc.xlsx")


# dropping the transmission column before calculating correlations with price
df.drop("transmission", axis=1).corr()["price"].sort_values()


# Sorting values by price and then removing the top 131 entries. With the remaining data, dropping transmission column and grouping by year
new_df = df.sort_values("price", ascending=False).iloc[131:]
new_df.drop("transmission", axis=1).groupby("year").mean()["price"]


# removing rows with year==1970
new_df = new_df[new_df.year != 1970]
new_df.drop("transmission", axis=1, inplace=True)
new_df.groupby("year").mean()["price"]


# using train_test_split to split data into training and testing data
X = new_df.drop("price", axis=1).values
y = new_df["price"].values
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=10)


# scaling the X training and testing data using MinMaxScaler
scaler = MinMaxScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)


# building a neural network model with 9 hidden layers to predict car prices
model = Sequential()
model.add(Dense(50, activation="relu"))
model.add(Dense(50, activation="relu"))
model.add(Dense(50, activation="relu"))
model.add(Dense(50, activation="relu"))
model.add(Dense(100, activation="relu"))
model.add(Dense(100, activation="relu"))
model.add(Dense(100, activation="relu"))
model.add(Dense(75, activation="relu"))
model.add(Dense(75, activation="relu"))
model.add(Dense(1))
model.compile(optimizer="adam", loss="mse")
model.fit(X_train, y_train, validation_data=(X_test, y_test), batch_size=300, epochs=200)


# determining the errors in the model's predictions
loss_data = pd.DataFrame(model.history.history)
loss_data.plot()
plt.show()
predictions = model.predict(X_test)
mean_absolute_error(y_test, predictions)
mean_squared_error(y_test, predictions)


# visualizing the model's predictions using a scatter plot
plt.scatter(y_test,predictions)
plt.plot(y_test,y_test,"g")
plt.show()


new_df.iloc[2]


# predicting the price of a new car stored as a pandas series
new_car_series = new_df.drop("price",axis=1).iloc[2]
new_car_series = scaler.transform(new_car_series.values.reshape(-1,5))
model.predict(new_car_series)
